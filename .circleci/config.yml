version: 2.1

orbs:
  slack: circleci/slack@3.3.0

executors:
  docker-publisher:
    docker:
      - image: circleci/buildpack-deps:stretch
  nais-deployer:
    docker:
      - image: navikt/deployment-cli:latest

jobs:
  verify:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - run:
          name: Creating Github Apps Installation Token
          command: |
            git clone https://github.com/navikt/github-apps-support.git
            export PATH=`pwd`/github-apps-support/bin:$PATH
            echo $GITHUB_PRIVATE_KEY | base64 --decode > ./github.key.pem
            GITHUB_TOKEN=$(generate-installation-token.sh `generate-jwt.sh ./github.key.pem $GITHUB_APP_ID`)
            echo "export GITHUB_TOKEN=$GITHUB_TOKEN" >> $BASH_ENV
            source $BASH_ENV
            echo -e "machine api.github.com login x-access-token password $GITHUB_TOKEN" >> .netrc
      - persist_to_workspace:
          root: .
          paths:
            - ./.netrc
            - ./github.key.pem

  build:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unpack variables
          command: cp /tmp/workspace/.netrc ~/.netrc
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run yarn install
          command: yarn install --ignore-optional --no-progress --frozen-lockfile
      - run:
          name: Run linting and tests
          command: yarn less:lint
      - run:
          name: Build
          command: yarn build
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Determin release version
          command: |
            export GIT_COMMIT_HASH=$(git log -n 1 --pretty=format:'%h')
            export GIT_COMMIT_DATE=$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')
            export VERSION=1.0_${GIT_COMMIT_DATE}_${GIT_COMMIT_HASH}
            echo $VERSION > ./VERSION.txt
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - persist_to_workspace:
          root: .
          paths:
            - ./VERSION.txt
            - ./Dockerfile
            - ./dist
            - ./k8s

  test-and-coverage:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run yarn install
          command: yarn install --ignore-optional --no-progress --frozen-lockfile
      - run:
          name: Run Test and coverage
          command: yarn test:coverage
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: .
          paths:
            - ./coverage
            - ./.nyc_output

  publish-sonar:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Unpack coverage data from previous step
          command: |
            cp -r /tmp/workspace/coverage ~/repo/coverage
            cp -r /tmp/workspace/.nyc_output ~/repo/.nyc_output
      - run:
          name: Install Sonar Scanner
          command: yarn global add sonarqube-scanner
      - run:
          name: Run Sonar Scanner
          halt_build_on_fail: false
          command: $(yarn global bin)/sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dproject.settings=./.sonarcloud.properties

  build-docker:
    executor: docker-publisher
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unpack workspace
          command: |
            cp /tmp/workspace/Dockerfile ./Dockerfile
            cp -r /tmp/workspace/dist ./dist
            cp -r /tmp/workspace/k8s ./k8s
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build Docker image
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            docker build -t $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$VERSION .
      - run:
          name: Archive Docker image
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            docker save -o image.tar $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$VERSION
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  publish-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Dockerhub
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin
            docker tag $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$VERSION $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:latest
            docker push $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME

  publish-github:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Github Package registry
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            echo "$GITHUB_PASSWORD" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
            docker tag $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$VERSION docker.pkg.github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$VERSION
            docker push docker.pkg.github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_PROJECT_REPONAME:$VERSION

  deploy:
    executor: nais-deployer
    working_directory: ~/repo
    steps:
      - slack/notify:
          color: '#117007'
          message: "Deploy av fpsak-frontend:${VERSION} til t4"
          webhook: ${SLACK_WEBHOOK}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Create NAIS Github deployment to T4
          command: |
            export VERSION=$(cat /tmp/workspace/VERSION.txt)
            deployment-cli deploy create \
            --cluster=dev-fss \
            --repository=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME \
            --appid=${GITHUB_APP_ID} \
            --team=teamforeldrepenger \
            --version=${VERSION} \
            --key=/tmp/workspace/github.key.pem \
            --vars=/tmp/workspace/k8s/application.t4.variabler.json \
            --resource=/tmp/workspace/k8s/app.yaml
      - slack/notify:
          color: '#117007'
          message: "_Deploy av fpsak-frontend:${VERSION} til t4 var vellykket._"
          webhook: ${SLACK_WEBHOOK}

workflows:
  version: 2
  test-and-deploy-pipeline:
    jobs:
      - verify:
          context: familie-ci
      - build:
          context: familie-ci
          requires:
            - verify
      - test-and-coverage:
          requires:
            - verify
      - build-docker:
          context: familie-ci
          requires:
            - build
      - publish-sonar:
          requires:
            - test-and-coverage
          filters:
            branches:
              only: master
      - publish-dockerhub:
          context: NAIS deployment
          requires:
            - build-docker
            - test-and-coverage
          filters:
            branches:
              only: master
      - publish-github:
          context: familie-ci
          requires:
            - build-docker
            - test-and-coverage
          filters:
            branches:
              only: master
      - deploy:
          context: familie-ci
          requires:
            - publish-dockerhub
            - publish-github
          filters:
            branches:
              only: master
