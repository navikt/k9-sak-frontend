name: Deploy Docker image
on:
  push:
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'CODEOWNERS'
    branches:
      - master
env:
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/k9-sak-web
  CLUSTER: dev-fss
  NAMESPACE: default
jobs:
  deploy-docker-image:
    name: Deploy Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Hente kode
        uses: actions/checkout@v2
      - name: Sette opp Node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 12.x
      - name: Get yarn cache directory path and set timestamp
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "TIMESTAMP=$(expr $(date +%Y%m%d%H%M%S))" >> $GITHUB_ENV
      - name: Cache node modules
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Installere dependencies
        run: yarn install --ignore-optional --no-progress --frozen-lockfile
      - name: Tester, typescript-sjekk og linting
        run: yarn test:all && yarn ts-check && yarn less:lint
      - name: Bygge dist
        run: yarn build
      - name: Sette Docker-navn og -tag
        run: |
          echo "TAG=$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE_BASE:$TIMESTAMP-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      - name: Bygg og laste opp docker-image
        run: |
          docker pull nginx:1.17.8-alpine
          docker build --tag ${IMAGE} --tag ${IMAGE_BASE}:latest --label "version=${TAG}" .
          echo "$GITHUB_TOKEN" | docker login --username "x-access-token" --password-stdin https://docker.pkg.github.com
          docker push ${IMAGE_BASE}:latest
          docker push ${IMAGE}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Lukk gamle issues
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deployment']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });

      - name: Opprett deployment issue
        id: createdeployissue
        if: success()
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.create( {
              owner: context.issue.owner,
              repo: context.issue.repo,
              labels: ['deployment'],
              body: 'Kommenter enten "/promote dev-fss default" eller "/promote prod-fss default"',
              title: 'Deploy av ${{ env.TAG }}'})
            .then(response => {
                    core.setOutput('number', response.data.number);
             });

      - name: Trigger verdikjede test
        if: success()
        shell: bash
        run: |
          curl -XPOST -u "x-access-token:${{secrets.GA_P_TOKEN}}" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/navikt/k9-verdikjede/dispatches \
          --data '{"event_type": "saksbehandling-verdikjede",
                   "client_payload": {
                      "trigger": "${{ github.repository }}",
                      "version": "${{ env.TAG }}",
                      "image": "${{ env.IMAGE }}"
                  }}'

      - name: Trigg deploy til dev-fss
        if: success()
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GA_P_TOKEN}}
          script: |
            const issue = { owner: context.issue.owner,
                            repo: context.issue.repo,
                            issue_number: ${{ steps.createdeployissue.outputs.number }} }
            github.issues.createComment({...issue,
                                    title: 'Deploy av ${{ env.TAG }}',
                                    body: '/promote ${{ env.CLUSTER }} ${{ env.NAMESPACE }}'})
